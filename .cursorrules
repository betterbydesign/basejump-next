# #Veer Development Guidelines

## Project Structure

project/\
├── src/\
│   ├── app/                    # App router pages\
│   │   ├── dashboard/          # Dashboard routes\
│   │   ├── auth/              # Auth routes\
│   │   ├── login/\
│   │   └── signup/\
│   ├── components/\
│   │   ├── ui/               # Base components\
│   │   ├── dashboard/        # Dashboard features\
│   │   ├── auth/            # Auth forms\
│   │   └── layout/          # Layout components\
│   ├── lib/                 # Core utilities\
│   └── hooks/               # Custom hooks

## Security Best Practices

- Use `supabase.auth.getUser()` instead of `getSession()`
- Implement RLS policies for all tables
- Audit logging for sensitive operations
- PHI encryption for medical data
- Session timeouts and management

## Component Patterns

### Base Component Template

<span>typescript</span>

<span>interface ComponentProps extends React.ComponentProps&lt;'div'&gt; {</span>

<span>title: string;</span>

<span>}</span>

<span>export function Component({ title, className, ...props }: ComponentProps) {</span>

<span>if (!title) return null;</span>

<span>return (</span>

<span>&lt;div className={cn('base-styles', className)} {...props}&gt;</span>

<span>{/</span> <span>*<span>Content</span>*</span> <span>/}</span>

<span>&lt;/div&gt;</span>

<span>);</span>

<span>}</span>

### Form Patterns

- Server actions for submissions
- Client-side validation
- Loading states
- Error handling with toast feedback
- Multi-step form with progress tracking

### Button Effects

- expandIcon: Icon reveal on hover
- gooeyLeft: Gradient slide effect
- shineHover: Shine animation
- ringHover: Border animation

## Styling System

### Colors & Theme

Reference `styles/globals.css` for the complete color system and theme variables.

### Typography Scale

- Headers: "text-2xl font-semibold"
- Subheaders: "text-lg font-medium"
- Body: "text-sm"
- Muted: "text-sm text-muted-foreground"

### Common Component Patterns

<span>typescript</span>

<span>// Interactive Cards</span>

<span>className={cn(</span>

<span>"bg-card text-card-foreground",</span>

<span>"hover:bg-accent transition-colors",</span>

<span>"border border-border",</span>

<span>"rounded-lg shadow-sm"</span>

<span>)}</span>

<span>// Form Inputs</span>

<span>className={cn(</span>

<span>"border-input bg-background",</span>

<span>"focus-visible:ring-2 focus-visible:ring-ring",</span>

<span>"disabled:bg-muted"</span>

<span>)}</span>

<span>// Buttons</span>

<span>className={cn(</span>

<span>// Primary</span>

<span>"bg-primary text-primary-foreground hover:bg-primary/90",</span>

<span>// Secondary</span>

<span>"bg-secondary text-secondary-foreground hover:bg-secondary/80",</span>

<span>// Destructive</span>

<span>"bg-destructive text-destructive-foreground hover:bg-destructive/90"</span>

<span>)}</span>

<span>// Status Indicators</span>

<span>className={cn(</span>

<span>"bg-destructive-10", // Error backgrounds</span>

<span>"text-success", // Success text</span>

<span>"text-muted-foreground" // Subdued text</span>

<span>)}</span>

## Development Principles

- Functional, declarative programming
- Strong TypeScript typing
- Early returns and guard clauses
- Consistent error handling
- Performance optimization with useMemo
- Component composition over inheritance

## Error Handling

<span>typescript</span>

<span>try {</span>

<span>if (!isValid) throw new ValidationError('Invalid input');</span>

<span>const result = await performOperation();</span>

<span>await auditLog.success('operation_completed');</span>

<span>return result;</span>

<span>} catch (error) {</span>

<span>await auditLog.error('operation_failed', error);</span>

<span>return { error: mapError(error) };</span>

<span>}</span>

## Testing Requirements

- Unit tests: Critical functions
- Integration: Data flows
- E2E: User journeys
- Security: Auth flows
- Performance: Load testing

## Documentation

- JSDoc for public functions
- RLS policy documentation
- API endpoint specs
- Security measure logs
- Build process docs